
#if Cpp

#else
#extension GL_OES_standard_derivatives : enable


precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define float2x2 mat2
#define float3x3 mat3
#define float4x4 mat4

#define int2 ivec2
#define int3 ivec3
#define int4 ivec4

#define frac fract
#define lerp mix
#define saturate(x) clamp(x, 0.0, 1.0)
#define rcp(x) 1.0f / x 
#define atan2 atan

//#define ddx dFdxFine
//#define ddy dFdyFine


#define ddx dFdx
#define ddy dFdy

float smooth_step(float a)
{
    return a * a * (3.0 - 2.0 * a);
}
float2 smooth_step(float2 a)
{
    return float2(smooth_step(a.x), smooth_step(a.y));
}
float3 smooth_step(float3 a)
{
    return float3(smooth_step(a.x), smooth_step(a.y), smooth_step(a.z));
}
float3 rsqrt(float3 a)
{
	return float3(pow(a.x, -0.5), pow(a.y, -0.5), pow(a.z, -0.5));
}
float rsqrt(float a)
{
	return pow(a, -0.5);
}
float contrast(float x, float c) { return (x - 0.5) * c + 0.5; }
float2 contrast(float2 x, float c) { return (x - 0.5) * c + 0.5; }
float3 contrast(float3 x, float c) { return (x - 0.5) * c + 0.5; }
float4 contrast(float4 x, float c) { return (x - 0.5) * c + 0.5; }

uniform float4x4 ModelViewProjection;
uniform float4x4 WorldToModel;
uniform float2 Resolution;
uniform float IsSpectatorView;
uniform float IsSkinned;
uniform float3 CameraPosition;
uniform float3 CameraForward;

float4 Sample(sampler2D Texture, float2 UV)
{
	return texture(Texture, UV);
}
float4 SampleLod(sampler2D Texture, float2 UV, float lod)
{
	return textureLod(Texture, UV, lod);
}
float4 SampleBias(sampler2D Texture, float2 UV, float bias)
{
	return texture(Texture, UV, bias);
}
float4 SampleGrad(sampler2D Texture, float2 UV, float4 derivative)
{
    return textureGrad(Texture, UV, derivative.xy, derivative.zw);
}

//float4 ddxy(float2 uv)
//{
//    return float4(ddx(uv), ddy(uv));
//}

float4 SampleLoad(sampler2D Texture, float2 UV, float2 resolution)
{
    return texture(Texture, (UV + 0.5) / resolution);
}
float  inverselerp(float  a, float  b, float  f) { return (f - a) / (b - a); }
float2 inverselerp(float2 a, float2 b, float2 f) { return (f - a) / (b - a); }
float3 inverselerp(float3 a, float3 b, float3 f) { return (f - a) / (b - a); }
float4 inverselerp(float4 a, float4 b, float4 f) { return (f - a) / (b - a); }


//float signNotZero(float f)
//{
//    return(f >= 0.0) ? 1.0 : -1.0;
//}
//vec2 signNotZero(vec2 v)
//{
//    return vec2(signNotZero(v.x), signNotZero(v.y));
//}
//vec2 OctEncode(in vec3 v)
//{
//    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
//    vec2 result = v.xy * (1.0 / l1norm);
//    if (v.z < 0.0) {
//        result = (1.0 - abs(result.yx)) * signNotZero(result.xy);
//    }
//    result = result * 0.5f + 0.5f;
//    return result;
//}
//vec3 OctDecode(vec2 o)
//{
//    o = o * 2.0f - 1.0f;
//    vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
//    if (v.z < 0.0) {
//        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
//    }
//    return normalize(v);
//}
float2 OctWrap(float2 v)
{
    return float2((1.0 - abs(v.y)) * (v.x >= 0.0 ? 1.0 : -1.0),
                  (1.0 - abs(v.x)) * (v.y >= 0.0 ? 1.0 : -1.0));
}
float2 OctEncode(float3 n)
{
    n /= (abs(n.x) + abs(n.y) + abs(n.z));
    n.xy = n.z >= 0.0 ? n.xy : OctWrap(n.xy);
    n.xy = n.xy * 0.5 + float2(0.5);
    return n.xy;
}
float3 OctDecode(float2 f)
{
    f = f * 2.0 - 1.0;
    float3 n = float3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = saturate(-n.z);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

float2 AngleEncode(float3 v)
{
    float X = v.x;
    float Y = v.y;
    float Z = v.z;
    float radius = sqrt(X * X + Y * Y + Z * Z);
    float theta = atan2(Y, X);
    float phi = acos(Z / radius);
    return float2(theta, phi);
}

float3 AngleDecode(float2 v)
{
    float theta = v.x;
    float phi = v.y;
    float radius = 1.0;
    float X = cos(theta) * cos(phi) * radius;
    float Y = sin(theta) * cos(phi) * radius;
    float Z = sin(phi) * radius;
    return float3(X, Y, Z);
}

// X and Y are UVs, Z is face index
float3 RayCubemap(float3 v)
{
    float3 vAbs = abs(v);
    float3 habs = 0.5f / vAbs;
    if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y)
    {
        return float3(
            (v.z < 0.0f ? -v.x : v.x) * (0.5f / vAbs.z) + 0.5f,
            (-v.y) * (0.5f / vAbs.z) + 0.5f,
            v.z < 0.0f ? 5.0f : 4.0f);
    }
    else if (vAbs.y >= vAbs.x)
    {
        return float3(
            (v.y < 0.0f ? v.x : -v.x) * (0.5f / vAbs.y) + 0.5f,
            (-v.z) * (0.5f / vAbs.y) + 0.5f,
            v.y < 0.0f ? 3.0f : 2.0f);
    }
    else
    {
        return float3(
            (v.x < 0.0f ? -v.y : v.y) * (0.5f / vAbs.x) + 0.5f,
            (-v.z) * (0.5f / vAbs.x) + 0.5f,
            v.x < 0.0f ? 1.0f : 0.0f);
    }
}

float RadicalInverse_VdC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

float2 Hammersley(uint i, uint N) {
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

float3 UniformSampleSphere(float2 u) {
    float z = 1.0 - 2.0 * u.x;
    float r = sqrt(max(0.0, 1.0 - z * z));
    float phi = 2.0 * 3.14159265359 * u.y;
    return float3(r * cos(phi), r * sin(phi), z);
}
const uint sampleCount = 1024u;

float3 RandomUnitVector(uint seed) {
    //uint N = 2048u; // Adjust this value to control the density of the distribution
    float2 u = Hammersley(uint(seed), sampleCount);
    return UniformSampleSphere(u);
}


// Spiral Blur
// https://www.youtube.com/watch?v=lOIP_Z_-0Hs
// Thanks vihart :>
float2 GoldenSpiral(float step)
{
    float PhiRadians = 2.3998277;
    return float2(sin(step * PhiRadians) * step, cos(step * PhiRadians) * step);
}

// Call this in a loop to get UV offsets
float2 GetSpiralBlurUVOffset(float Radius, float Samples, float i)
{
    return GoldenSpiral(i) / Samples * Radius;
}

float GetSpiralBlurWeight(float Samples, float i)
{
    Samples += 0.01f;
    return (1.0f - (i / Samples)) / Samples * 2.0;
}
vec3 rotateVector(vec3 vec, float2 angle)
{
    mat3 rotationMatrix;

    float radX = radians(angle.x);
    float radY = radians(angle.y);

    float cosX = cos(radX);
    float sinX = sin(radX);
    float cosY = cos(radY);
    float sinY = sin(radY);

    // Rotation matrix for X axis
    mat3 rotationX = mat3(
        1.0, 0.0, 0.0,
        0.0, cosX, -sinX,
        0.0, sinX, cosX
    );

    // Rotation matrix for Y axis
    mat3 rotationY = mat3(
        cosY, 0.0, sinY,
        0.0, 1.0, 0.0,
        -sinY, 0.0, cosY
    );

    // Combine the rotation matrices
    rotationMatrix = rotationY * rotationX;

    // Rotate the input vector
    vec3 rotatedVector = rotationMatrix * vec;

    return rotatedVector;
}
#endif
